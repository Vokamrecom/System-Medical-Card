//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("SystemMed", "FK_Consultations_Doctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Doctor), "Consultations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.Consultation), true)]
[assembly: EdmRelationshipAttribute("SystemMed", "FK_Consultations_Patients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Patient), "Consultations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.Consultation), true)]
[assembly: EdmRelationshipAttribute("SystemMed", "FK_Diagnoses_Doctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Doctor), "Diagnoses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.Diagnosis), true)]
[assembly: EdmRelationshipAttribute("SystemMed", "FK_Diagnoses_Patients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Patient), "Diagnoses", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.Diagnosis), true)]
[assembly: EdmRelationshipAttribute("SystemMed", "FK_Users_Doctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Doctor), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.User), true)]
[assembly: EdmRelationshipAttribute("SystemMed", "FK_Users_Patients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SystemMed.Data.Patient), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SystemMed.Data.User), true)]

#endregion

namespace SystemMed.Data
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class SystemMedContainer : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект SystemMedContainer, используя строку соединения из раздела "SystemMedContainer" файла конфигурации приложения.
        /// </summary>
        public SystemMedContainer() : base("name=SystemMedContainer", "SystemMedContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SystemMedContainer.
        /// </summary>
        public SystemMedContainer(string connectionString) : base(connectionString, "SystemMedContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта SystemMedContainer.
        /// </summary>
        public SystemMedContainer(EntityConnection connection) : base(connection, "SystemMedContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Consultation> Consultations
        {
            get
            {
                if ((_Consultations == null))
                {
                    _Consultations = base.CreateObjectSet<Consultation>("Consultations");
                }
                return _Consultations;
            }
        }
        private ObjectSet<Consultation> _Consultations;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Diagnosis> Diagnoses
        {
            get
            {
                if ((_Diagnoses == null))
                {
                    _Diagnoses = base.CreateObjectSet<Diagnosis>("Diagnoses");
                }
                return _Diagnoses;
            }
        }
        private ObjectSet<Diagnosis> _Diagnoses;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Doctor> Doctors
        {
            get
            {
                if ((_Doctors == null))
                {
                    _Doctors = base.CreateObjectSet<Doctor>("Doctors");
                }
                return _Doctors;
            }
        }
        private ObjectSet<Doctor> _Doctors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Patient> Patients
        {
            get
            {
                if ((_Patients == null))
                {
                    _Patients = base.CreateObjectSet<Patient>("Patients");
                }
                return _Patients;
            }
        }
        private ObjectSet<Patient> _Patients;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Consultations. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToConsultations(Consultation consultation)
        {
            base.AddObject("Consultations", consultation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Diagnoses. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDiagnoses(Diagnosis diagnosis)
        {
            base.AddObject("Diagnoses", diagnosis);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Doctors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDoctors(Doctor doctor)
        {
            base.AddObject("Doctors", doctor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Patients. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPatients(Patient patient)
        {
            base.AddObject("Patients", patient);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Users. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SystemMed", Name="Consultation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Consultation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Consultation.
        /// </summary>
        /// <param name="consultationId">Исходное значение свойства ConsultationId.</param>
        public static Consultation CreateConsultation(global::System.Int32 consultationId)
        {
            Consultation consultation = new Consultation();
            consultation.ConsultationId = consultationId;
            return consultation;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ConsultationId
        {
            get
            {
                return _ConsultationId;
            }
            set
            {
                if (_ConsultationId != value)
                {
                    OnConsultationIdChanging(value);
                    ReportPropertyChanging("ConsultationId");
                    _ConsultationId = StructuralObject.SetValidValue(value, "ConsultationId");
                    ReportPropertyChanged("ConsultationId");
                    OnConsultationIdChanged();
                }
            }
        }
        private global::System.Int32 _ConsultationId;
        partial void OnConsultationIdChanging(global::System.Int32 value);
        partial void OnConsultationIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> ScheduleDate
        {
            get
            {
                return _ScheduleDate;
            }
            set
            {
                OnScheduleDateChanging(value);
                ReportPropertyChanging("ScheduleDate");
                _ScheduleDate = StructuralObject.SetValidValue(value, "ScheduleDate");
                ReportPropertyChanged("ScheduleDate");
                OnScheduleDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _ScheduleDate;
        partial void OnScheduleDateChanging(Nullable<global::System.DateTime> value);
        partial void OnScheduleDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> ScheduleTime
        {
            get
            {
                return _ScheduleTime;
            }
            set
            {
                OnScheduleTimeChanging(value);
                ReportPropertyChanging("ScheduleTime");
                _ScheduleTime = StructuralObject.SetValidValue(value, "ScheduleTime");
                ReportPropertyChanged("ScheduleTime");
                OnScheduleTimeChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _ScheduleTime;
        partial void OnScheduleTimeChanging(Nullable<global::System.TimeSpan> value);
        partial void OnScheduleTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value, "PatientId");
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientId;
        partial void OnPatientIdChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                OnDoctorIdChanging(value);
                ReportPropertyChanging("DoctorId");
                _DoctorId = StructuralObject.SetValidValue(value, "DoctorId");
                ReportPropertyChanged("DoctorId");
                OnDoctorIdChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorId;
        partial void OnDoctorIdChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, true, "Reason");
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true, "Notes");
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Conclusion
        {
            get
            {
                return _Conclusion;
            }
            set
            {
                OnConclusionChanging(value);
                ReportPropertyChanging("Conclusion");
                _Conclusion = StructuralObject.SetValidValue(value, true, "Conclusion");
                ReportPropertyChanged("Conclusion");
                OnConclusionChanged();
            }
        }
        private global::System.String _Conclusion;
        partial void OnConclusionChanging(global::System.String value);
        partial void OnConclusionChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Consultations_Doctors", "Doctors")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Consultations_Doctors", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Consultations_Doctors", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Consultations_Doctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("SystemMed.FK_Consultations_Doctors", "Doctors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Consultations_Patients", "Patients")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Consultations_Patients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Consultations_Patients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Consultations_Patients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("SystemMed.FK_Consultations_Patients", "Patients", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SystemMed", Name="Diagnosis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Diagnosis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Diagnosis.
        /// </summary>
        /// <param name="diagnoseId">Исходное значение свойства DiagnoseId.</param>
        public static Diagnosis CreateDiagnosis(global::System.Int32 diagnoseId)
        {
            Diagnosis diagnosis = new Diagnosis();
            diagnosis.DiagnoseId = diagnoseId;
            return diagnosis;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiagnoseId
        {
            get
            {
                return _DiagnoseId;
            }
            set
            {
                if (_DiagnoseId != value)
                {
                    OnDiagnoseIdChanging(value);
                    ReportPropertyChanging("DiagnoseId");
                    _DiagnoseId = StructuralObject.SetValidValue(value, "DiagnoseId");
                    ReportPropertyChanged("DiagnoseId");
                    OnDiagnoseIdChanged();
                }
            }
        }
        private global::System.Int32 _DiagnoseId;
        partial void OnDiagnoseIdChanging(global::System.Int32 value);
        partial void OnDiagnoseIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value, "PatientId");
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientId;
        partial void OnPatientIdChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                OnDoctorIdChanging(value);
                ReportPropertyChanging("DoctorId");
                _DoctorId = StructuralObject.SetValidValue(value, "DoctorId");
                ReportPropertyChanged("DoctorId");
                OnDoctorIdChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorId;
        partial void OnDoctorIdChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Subect
        {
            get
            {
                return _Subect;
            }
            set
            {
                OnSubectChanging(value);
                ReportPropertyChanging("Subect");
                _Subect = StructuralObject.SetValidValue(value, true, "Subect");
                ReportPropertyChanged("Subect");
                OnSubectChanged();
            }
        }
        private global::System.String _Subect;
        partial void OnSubectChanging(global::System.String value);
        partial void OnSubectChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Notes
        {
            get
            {
                return _Notes;
            }
            set
            {
                OnNotesChanging(value);
                ReportPropertyChanging("Notes");
                _Notes = StructuralObject.SetValidValue(value, true, "Notes");
                ReportPropertyChanged("Notes");
                OnNotesChanged();
            }
        }
        private global::System.String _Notes;
        partial void OnNotesChanging(global::System.String value);
        partial void OnNotesChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DiagnosticationDate
        {
            get
            {
                return _DiagnosticationDate;
            }
            set
            {
                OnDiagnosticationDateChanging(value);
                ReportPropertyChanging("DiagnosticationDate");
                _DiagnosticationDate = StructuralObject.SetValidValue(value, "DiagnosticationDate");
                ReportPropertyChanged("DiagnosticationDate");
                OnDiagnosticationDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _DiagnosticationDate;
        partial void OnDiagnosticationDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDiagnosticationDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Prescription
        {
            get
            {
                return _Prescription;
            }
            set
            {
                OnPrescriptionChanging(value);
                ReportPropertyChanging("Prescription");
                _Prescription = StructuralObject.SetValidValue(value, true, "Prescription");
                ReportPropertyChanged("Prescription");
                OnPrescriptionChanged();
            }
        }
        private global::System.String _Prescription;
        partial void OnPrescriptionChanging(global::System.String value);
        partial void OnPrescriptionChanged();


        ///////////////////////////////////////////////////////////////////////////////1
       




        //////////////////////////////////////////////////////////////////////////////////////2
        #endregion

        #region Свойства навигации

        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Diagnoses_Doctors", "Doctors")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Diagnoses_Doctors", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Diagnoses_Doctors", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Diagnoses_Doctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("SystemMed.FK_Diagnoses_Doctors", "Doctors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Diagnoses_Patients", "Patients")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Diagnoses_Patients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Diagnoses_Patients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Diagnoses_Patients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("SystemMed.FK_Diagnoses_Patients", "Patients", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SystemMed", Name="Doctor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Doctor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Doctor.
        /// </summary>
        /// <param name="doctorId">Исходное значение свойства DoctorId.</param>
        public static Doctor CreateDoctor(global::System.Int32 doctorId)
        {
            Doctor doctor = new Doctor();
            doctor.DoctorId = doctorId;
            return doctor;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                if (_DoctorId != value)
                {
                    OnDoctorIdChanging(value);
                    ReportPropertyChanging("DoctorId");
                    _DoctorId = StructuralObject.SetValidValue(value, "DoctorId");
                    ReportPropertyChanged("DoctorId");
                    OnDoctorIdChanged();
                }
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Skils
        {
            get
            {
                return _Skils;
            }
            set
            {
                OnSkilsChanging(value);
                ReportPropertyChanging("Skils");
                _Skils = StructuralObject.SetValidValue(value, true, "Skils");
                ReportPropertyChanged("Skils");
                OnSkilsChanged();
            }
        }
        private global::System.String _Skils;
        partial void OnSkilsChanging(global::System.String value);
        partial void OnSkilsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Consultations_Doctors", "Consultations")]
        public EntityCollection<Consultation> Consultations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Consultation>("SystemMed.FK_Consultations_Doctors", "Consultations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Consultation>("SystemMed.FK_Consultations_Doctors", "Consultations", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Diagnoses_Doctors", "Diagnoses")]
        public EntityCollection<Diagnosis> Diagnoses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Diagnosis>("SystemMed.FK_Diagnoses_Doctors", "Diagnoses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Diagnosis>("SystemMed.FK_Diagnoses_Doctors", "Diagnoses", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Users_Doctors", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("SystemMed.FK_Users_Doctors", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("SystemMed.FK_Users_Doctors", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SystemMed", Name="Patient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patient : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Patient.
        /// </summary>
        /// <param name="patientId">Исходное значение свойства PatientId.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="number">Исходное значение свойства Number.</param>
        public static Patient CreatePatient(global::System.Int32 patientId, global::System.String name, global::System.String number)
        {
            Patient patient = new Patient();
            patient.PatientId = patientId;
            patient.Name = name;
            patient.Number = number;
            return patient;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                if (_PatientId != value)
                {
                    OnPatientIdChanging(value);
                    ReportPropertyChanging("PatientId");
                    _PatientId = StructuralObject.SetValidValue(value, "PatientId");
                    ReportPropertyChanged("PatientId");
                    OnPatientIdChanged();
                }
            }
        }
        private global::System.Int32 _PatientId;
        partial void OnPatientIdChanging(global::System.Int32 value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Number
        {
            get
            {
                return _Number;
            }
            set
            {
                OnNumberChanging(value);
                ReportPropertyChanging("Number");
                _Number = StructuralObject.SetValidValue(value, false, "Number");
                ReportPropertyChanged("Number");
                OnNumberChanged();
            }
        }
        private global::System.String _Number;
        partial void OnNumberChanging(global::System.String value);
        partial void OnNumberChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Birthdate
        {
            get
            {
                return _Birthdate;
            }
            set
            {
                OnBirthdateChanging(value);
                ReportPropertyChanging("Birthdate");
                _Birthdate = StructuralObject.SetValidValue(value, "Birthdate");
                ReportPropertyChanged("Birthdate");
                OnBirthdateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Birthdate;
        partial void OnBirthdateChanging(Nullable<global::System.DateTime> value);
        partial void OnBirthdateChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Consultations_Patients", "Consultations")]
        public EntityCollection<Consultation> Consultations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Consultation>("SystemMed.FK_Consultations_Patients", "Consultations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Consultation>("SystemMed.FK_Consultations_Patients", "Consultations", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Diagnoses_Patients", "Diagnoses")]
        public EntityCollection<Diagnosis> Diagnoses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Diagnosis>("SystemMed.FK_Diagnoses_Patients", "Diagnoses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Diagnosis>("SystemMed.FK_Diagnoses_Patients", "Diagnoses", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Users_Patients", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("SystemMed.FK_Users_Patients", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("SystemMed.FK_Users_Patients", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SystemMed", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта User.
        /// </summary>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        public static User CreateUser(global::System.Int32 userId)
        {
            User user = new User();
            user.UserId = userId;
            return user;
        }

        #endregion

        #region Простые свойства
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value, "UserId");
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, true, "UserName");
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, true, "Password");
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                OnDoctorIdChanging(value);
                ReportPropertyChanging("DoctorId");
                _DoctorId = StructuralObject.SetValidValue(value, "DoctorId");
                ReportPropertyChanged("DoctorId");
                OnDoctorIdChanged();
            }
        }
        private Nullable<global::System.Int32> _DoctorId;
        partial void OnDoctorIdChanging(Nullable<global::System.Int32> value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                OnRoleIdChanging(value);
                ReportPropertyChanging("RoleId");
                _RoleId = StructuralObject.SetValidValue(value, "RoleId");
                ReportPropertyChanged("RoleId");
                OnRoleIdChanged();
            }
        }
        private Nullable<global::System.Int16> _RoleId;
        partial void OnRoleIdChanging(Nullable<global::System.Int16> value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value, "PatientId");
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientId;
        partial void OnPatientIdChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIdChanged();

        #endregion

        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Users_Doctors", "Doctors")]
        public Doctor Doctor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Users_Doctors", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Users_Doctors", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctor> DoctorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctor>("SystemMed.FK_Users_Doctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctor>("SystemMed.FK_Users_Doctors", "Doctors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SystemMed", "FK_Users_Patients", "Patients")]
        public Patient Patient
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Users_Patients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Users_Patients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patient> PatientReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patient>("SystemMed.FK_Users_Patients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patient>("SystemMed.FK_Users_Patients", "Patients", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
